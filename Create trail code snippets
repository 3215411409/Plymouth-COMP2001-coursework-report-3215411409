from flask import Flask, request, jsonify
from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey, DateTime
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy.ext.declarative import declarative_base
import hashlib
import jwt
import datetime

app = Flask(__name__)

# 数据库连接配置
engine = create_engine('mssql://user:password@dist - 6 - 505.uopnet.plymouth.ac.uk/database_name')
Session = sessionmaker(bind=engine)
session = Session()
Base = declarative_base()

# 定义用户类
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String)
    email = Column(String)
    password_hash = Column(String)

# 定义步道类
class Trail(Base):
    __tablename__ = 'trails'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    description = Column(String)
    creation_time = Column(DateTime)
    last_update_time = Column(DateTime)
    user_id = Column(Integer, ForeignKey('users.id'))
    user = relationship('User')

# 定义位置点类
class LocationPoint(Base):
    __tablename__ = 'location_points'
    id = Column(Integer, primary_key=True)
    longitude = Column(Float)
    latitude = Column(Float)
    altitude = Column(Float)
    terrain_type = Column(String)
    trail_id = Column(Integer, ForeignKey('trails.id'))
    trail = relationship('Trail')

# 生成令牌函数
def generate_token(user_id):
    payload = {
        'user_id': user_id,
        'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1)
    }
    return jwt.encode(payload, 'secret_key', algorithm='HS256')

# 验证令牌装饰器
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'message': 'Token is missing'}), 401
        try:
            data = jwt.decode(token, 'secret_key', algorithms=['HS256'])
        except:
            return jsonify({'message': 'Token is invalid'}), 401
        return f(*args, **kwargs)
    return decorated

# 创建步道的路由
@app.route('/trails/create', methods=['POST'])
@token_required
def create_trail():
    data = request.get_json()
    name = data['name']
    description = data['description']
    user_id = data['user_id']

    # 验证用户是否存在
    user = session.query(User).filter_by(id=user_id).first()
    if not user:
        return jsonify({'message': 'User does not exist'}), 400

    # 创建步道对象
    trail = Trail(
        name=name,
        description=description,
        creation_time=datetime.now(),
        last_update_time=datetime.now(),
        user_id=user_id
    )
    session.add(trail)
    session.commit()

    return jsonify({'message': 'The trail is created successfully'}), 201
